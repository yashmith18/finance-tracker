{"version":3,"sources":["components/TransactionForm.js","components/TransactionList.js","components/FinanceChart.js","App.js","reportWebVitals.js","index.js"],"names":["TransactionForm","_ref","fetchTransactions","transaction","setTransaction","useState","transactionId","type","amount","category","date","loading","setLoading","error","setError","handleChange","e","name","value","target","prevTransaction","[object Object]","React","createElement","onSubmit","async","preventDefault","axios","post","console","style","color","onChange","placeholder","required","min","disabled","TransactionList","transactions","setTransactions","useEffect","response","get","data","map","txn","key","S","N","FinanceChart","setData","expense","parseFloat","income","LineChart","width","height","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f857ea4f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TransactionForm = ({ fetchTransactions }) => {\r\n    const [transaction, setTransaction] = useState({\r\n        transactionId: '',\r\n        type: 'expense',  // Default type is 'expense'\r\n        amount: '',\r\n        category: '',\r\n        date: ''\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false);  // State to manage loading status\r\n    const [error, setError] = useState(null);  // State to manage error messages\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setTransaction((prevTransaction) => ({\r\n            ...prevTransaction,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Simple client-side validation\r\n        if (!transaction.amount || transaction.amount <= 0) {\r\n            setError('Amount should be greater than 0');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // POST request to add the transaction\r\n            await axios.post('https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions', transaction);\r\n            \r\n            // Refresh transaction list after successful addition\r\n            if (fetchTransactions) {\r\n                fetchTransactions();\r\n            }\r\n            \r\n            // Reset the form after submission\r\n            setTransaction({ transactionId: '', type: 'expense', amount: '', category: '', date: '' });\r\n        } catch (error) {\r\n            console.error(\"Error adding transaction:\", error);\r\n            setError(\"Failed to add transaction. Please try again.\");\r\n        } finally {\r\n            setLoading(false);  // Stop loading state after request completion\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add New Transaction</h2>\r\n\r\n            {/* Display error message if any */}\r\n            {error && <p style={{ color: 'red' }}>{error}</p>}\r\n\r\n            <div>\r\n                <label>Transaction ID:</label>\r\n                <input\r\n                    name=\"transactionId\"\r\n                    value={transaction.transactionId}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Transaction ID\"\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label>Type:</label>\r\n                <select name=\"type\" value={transaction.type} onChange={handleChange} required>\r\n                    <option value=\"expense\">Expense</option>\r\n                    <option value=\"income\">Income</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Amount:</label>\r\n                <input\r\n                    name=\"amount\"\r\n                    value={transaction.amount}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Amount\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label>Category:</label>\r\n                <input\r\n                    name=\"category\"\r\n                    value={transaction.category}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Category\"\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <label>Date:</label>\r\n                <input\r\n                    name=\"date\"\r\n                    value={transaction.date}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Date (YYYY-MM-DD)\"\r\n                    type=\"date\"\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <button type=\"submit\" disabled={loading}>\r\n                {loading ? \"Adding...\" : \"Add Transaction\"}\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TransactionForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TransactionList = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    const fetchTransactions = async () => {\r\n        try {\r\n            const response = await axios.get('https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions');\r\n            setTransactions(response.data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching transactions:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Transaction List</h2>\r\n            <ul>\r\n                {transactions.map((txn) => (\r\n                    <li key={txn.transactionId.S}>\r\n                        <strong>{txn.date.S}</strong>: {txn.type.S === 'income' ? 'Income' : 'Expense'} - ${txn.amount.N} in {txn.category.S}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { LineChart, Line, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';\r\n\r\nconst FinanceChart = () => {\r\n    const [data, setData] = useState([]);\r\n\r\n    const fetchTransactions = async () => {\r\n        try {\r\n            const response = await axios.get('https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions');\r\n            const transactions = response.data.map(txn => ({\r\n                date: txn.date.S, // Assuming `date.S` contains a date or time string\r\n                expense: txn.type.S === 'expense' ? parseFloat(txn.amount.N) : 0,\r\n                income: txn.type.S === 'income' ? parseFloat(txn.amount.N) : 0,\r\n            }));\r\n            setData(transactions);\r\n        } catch (error) {\r\n            console.error(\"Error fetching transactions:\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions();\r\n    }, []);\r\n\r\n    return (\r\n        <LineChart width={600} height={300} data={data} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"expense\" stroke=\"red\" name=\"Expenses\" />\r\n            <Line type=\"monotone\" dataKey=\"income\" stroke=\"green\" name=\"Income\" />\r\n        </LineChart>\r\n    );\r\n};\r\n\r\nexport default FinanceChart;\r\n","import React from 'react';\nimport TransactionForm from './components/TransactionForm';\nimport TransactionList from './components/TransactionList';\nimport FinanceChart from './components/FinanceChart';\n\nfunction App() {\n    return (\n        <div>\n            <h1>Personal Finance Tracker</h1>\n            <TransactionForm />\n            <TransactionList />\n            <FinanceChart />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}