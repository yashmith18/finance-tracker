{"version":3,"sources":["components/TransactionForm.js","components/TransactionList.js","components/FinanceChart.js","App.js","reportWebVitals.js","index.js"],"names":["TransactionForm","_ref","fetchTransactions","transaction","setTransaction","useState","transactionId","type","amount","category","date","loading","setLoading","error","setError","handleChange","e","name","value","target","prevTransaction","[object Object]","fieldStyle","marginBottom","display","flexDirection","labelStyle","fontWeight","inputStyle","padding","border","borderRadius","fontSize","buttonStyle","backgroundColor","color","cursor","React","createElement","onSubmit","async","preventDefault","axios","post","console","style","maxWidth","margin","boxShadow","textAlign","onChange","placeholder","required","min","disabled","TransactionList","transactions","setTransactions","useEffect","response","get","data","cardStyle","justifyContent","alignItems","incomeStyle","expenseStyle","dateStyle","listStyleType","length","map","txn","key","S","N","FinanceChart","setData","filter","_txn$date","_txn$amount","_txn$type","expense","parseFloat","income","ResponsiveContainer","width","height","LineChart","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","YAxis","Tooltip","Legend","Line","stroke","strokeWidth","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6b75d68f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TransactionForm = ({ fetchTransactions }) => {\r\n    const [transaction, setTransaction] = useState({\r\n        transactionId: '',\r\n        type: 'expense', // Default type is 'expense'\r\n        amount: '',\r\n        category: '',\r\n        date: '',\r\n    });\r\n\r\n    const [loading, setLoading] = useState(false); // State to manage loading status\r\n    const [error, setError] = useState(null); // State to manage error messages\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setTransaction((prevTransaction) => ({\r\n            ...prevTransaction,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        // Simple client-side validation\r\n        if (!transaction.amount || transaction.amount <= 0) {\r\n            setError('Amount should be greater than 0');\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // POST request to add the transaction\r\n            await axios.post(\r\n                'https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions',\r\n                transaction\r\n            );\r\n\r\n            // Refresh transaction list after successful addition\r\n            if (fetchTransactions) {\r\n                fetchTransactions();\r\n            }\r\n\r\n            // Reset the form after submission\r\n            setTransaction({\r\n                transactionId: '',\r\n                type: 'expense',\r\n                amount: '',\r\n                category: '',\r\n                date: '',\r\n            });\r\n        } catch (error) {\r\n            console.error('Error adding transaction:', error);\r\n            setError('Failed to add transaction. Please try again.');\r\n        } finally {\r\n            setLoading(false); // Stop loading state after request completion\r\n        }\r\n    };\r\n\r\n    const formStyle = {\r\n        maxWidth: '500px',\r\n        margin: '20px auto',\r\n        padding: '20px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '8px',\r\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\r\n        backgroundColor: '#f9f9f9',\r\n    };\r\n\r\n    const fieldStyle = {\r\n        marginBottom: '15px',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    };\r\n\r\n    const labelStyle = {\r\n        marginBottom: '5px',\r\n        fontWeight: 'bold',\r\n    };\r\n\r\n    const inputStyle = {\r\n        padding: '8px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '4px',\r\n        fontSize: '14px',\r\n    };\r\n\r\n    const buttonStyle = {\r\n        padding: '10px 15px',\r\n        border: 'none',\r\n        borderRadius: '4px',\r\n        backgroundColor: loading ? '#ccc' : '#28a745',\r\n        color: 'white',\r\n        cursor: loading ? 'not-allowed' : 'pointer',\r\n        fontSize: '16px',\r\n        fontWeight: 'bold',\r\n    };\r\n\r\n    const errorStyle = {\r\n        color: 'red',\r\n        marginBottom: '10px',\r\n        fontWeight: 'bold',\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} style={formStyle}>\r\n            <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n                Add New Transaction\r\n            </h2>\r\n\r\n            {/* Display error message if any */}\r\n            {error && <p style={errorStyle}>{error}</p>}\r\n\r\n            <div style={fieldStyle}>\r\n                <label style={labelStyle}>Transaction ID:</label>\r\n                <input\r\n                    name=\"transactionId\"\r\n                    value={transaction.transactionId}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Transaction ID\"\r\n                    style={inputStyle}\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div style={fieldStyle}>\r\n                <label style={labelStyle}>Type:</label>\r\n                <select\r\n                    name=\"type\"\r\n                    value={transaction.type}\r\n                    onChange={handleChange}\r\n                    style={inputStyle}\r\n                    required\r\n                >\r\n                    <option value=\"expense\">Expense</option>\r\n                    <option value=\"income\">Income</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div style={fieldStyle}>\r\n                <label style={labelStyle}>Amount:</label>\r\n                <input\r\n                    name=\"amount\"\r\n                    value={transaction.amount}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Amount\"\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    style={inputStyle}\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div style={fieldStyle}>\r\n                <label style={labelStyle}>Category:</label>\r\n                <input\r\n                    name=\"category\"\r\n                    value={transaction.category}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Category\"\r\n                    style={inputStyle}\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <div style={fieldStyle}>\r\n                <label style={labelStyle}>Date:</label>\r\n                <input\r\n                    name=\"date\"\r\n                    value={transaction.date}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Date (YYYY-MM-DD)\"\r\n                    type=\"date\"\r\n                    style={inputStyle}\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <button type=\"submit\" style={buttonStyle} disabled={loading}>\r\n                {loading ? 'Adding...' : 'Add Transaction'}\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default TransactionForm;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TransactionList = () => {\r\n    const [transactions, setTransactions] = useState([]);\r\n\r\n    const fetchTransactions = async () => {\r\n        try {\r\n            const response = await axios.get(\r\n                'https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions'\r\n            );\r\n            setTransactions(response.data);\r\n        } catch (error) {\r\n            console.error('Error fetching transactions:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions();\r\n    }, []);\r\n\r\n    const containerStyle = {\r\n        maxWidth: '800px',\r\n        margin: '20px auto',\r\n        padding: '20px',\r\n        backgroundColor: '#f9f9f9',\r\n        borderRadius: '8px',\r\n        boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\r\n    };\r\n\r\n    const listStyle = {\r\n        listStyleType: 'none',\r\n        padding: 0,\r\n    };\r\n\r\n    const cardStyle = {\r\n        padding: '15px',\r\n        marginBottom: '10px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '6px',\r\n        boxShadow: '0 1px 4px rgba(0, 0, 0, 0.1)',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        backgroundColor: '#fff',\r\n    };\r\n\r\n    const incomeStyle = {\r\n        color: '#28a745', // Green for income\r\n        fontWeight: 'bold',\r\n    };\r\n\r\n    const expenseStyle = {\r\n        color: '#dc3545', // Red for expense\r\n        fontWeight: 'bold',\r\n    };\r\n\r\n    const dateStyle = {\r\n        fontSize: '14px',\r\n        color: '#6c757d', // Gray for the date\r\n    };\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            <h2 style={{ textAlign: 'center', marginBottom: '20px' }}>Transaction List</h2>\r\n            <ul style={listStyle}>\r\n                {transactions.length === 0 ? (\r\n                    <p style={{ textAlign: 'center', color: '#6c757d' }}>No transactions found.</p>\r\n                ) : (\r\n                    transactions.map((txn) => (\r\n                        <li key={txn.transactionId.S} style={cardStyle}>\r\n                            <div>\r\n                                <strong style={txn.type.S === 'income' ? incomeStyle : expenseStyle}>\r\n                                    {txn.type.S === 'income' ? 'Income' : 'Expense'}\r\n                                </strong>\r\n                                <p style={dateStyle}>{txn.date.S}</p>\r\n                            </div>\r\n                            <div>\r\n                                <p>\r\n                                    <strong>${txn.amount.N}</strong> in {txn.category.S}\r\n                                </p>\r\n                            </div>\r\n                        </li>\r\n                    ))\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport {\r\n    LineChart,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    Tooltip,\r\n    Legend,\r\n    CartesianGrid,\r\n    ResponsiveContainer,\r\n} from 'recharts';\r\n\r\nconst FinanceChart = () => {\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    const fetchTransactions = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await axios.get(\r\n                'https://b0z4adhs30.execute-api.us-east-1.amazonaws.com/prod/transactions'\r\n            );\r\n            const transactions = response.data\r\n                .filter(txn => txn.date?.S && txn.amount?.N && txn.type?.S) // Validate transaction fields\r\n                .map(txn => ({\r\n                    date: txn.date.S,\r\n                    expense: txn.type.S === 'expense' ? parseFloat(txn.amount.N) : 0,\r\n                    income: txn.type.S === 'income' ? parseFloat(txn.amount.N) : 0,\r\n                }));\r\n            setData(transactions);\r\n        } catch (error) {\r\n            console.error('Error fetching transactions:', error);\r\n            setError('Failed to load transaction data. Please try again later.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchTransactions();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <div>Loading data...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={400}>\r\n            <LineChart\r\n                data={data}\r\n                margin={{ top: 20, right: 30, bottom: 20, left: 10 }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"expense\"\r\n                    stroke=\"red\"\r\n                    name=\"Expenses\"\r\n                    strokeWidth={2}\r\n                />\r\n                <Line\r\n                    type=\"monotone\"\r\n                    dataKey=\"income\"\r\n                    stroke=\"green\"\r\n                    name=\"Income\"\r\n                    strokeWidth={2}\r\n                />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    );\r\n};\r\n\r\nexport default FinanceChart;\r\n","import React from 'react';\nimport TransactionForm from './components/TransactionForm';\nimport TransactionList from './components/TransactionList';\nimport FinanceChart from './components/FinanceChart';\n\nfunction App() {\n    return (\n        <div>\n            <h1>Personal Finance Tracker</h1>\n            <TransactionForm />\n            <TransactionList />\n            <FinanceChart />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}